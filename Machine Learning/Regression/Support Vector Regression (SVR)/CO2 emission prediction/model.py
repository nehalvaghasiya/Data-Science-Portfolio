# -*- coding: utf-8 -*-
"""co2_emission_SVR.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1M3HVN31N_G-0r44OqRHShBTZ5eXxvDNy

#Import libraries
"""

# Commented out IPython magic to ensure Python compatibility.
                                                             
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

"""#Get the data
- Required steps to follow:
  1. Connect google-collab to google drive
  2. Arrange the files according to directory tree as shown in Readme.md
  3. Add the created model to the directory and use it in deployment.

"""

#pd.read_csv('file_name')
co2 = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Machine learning/Regression/Support Vector Regression (SVR)/co2 emmissions/CO2 Emissions_Canada.csv')

co2.head()

"""- List of all columns"""

co2.columns

#Input columns will be stored in x
#Output columns will be stored in y

x = co2[['Engine Size(L)', 'Cylinders','Fuel Consumption Comb (L/100 km)']]
y = co2['CO2 Emissions(g/km)']

"""#Split the train and test data"""

#Split the data with 40% of test size

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.4, random_state=101)

#create model of linear regression

from sklearn.svm import SVR
model = SVR(kernel = 'rbf')

#Train the model

model.fit(X_train,y_train)

"""## Predicting Test Data"""

predictions = model.predict( X_test)

"""**Create a scatterplot of the real test values versus the predicted values.**"""

plt.scatter(y_test,predictions)
plt.xlabel('Y Test')
plt.ylabel('Predicted Y')

"""## Evaluating the Model"""

from sklearn import metrics

print('MAE:', metrics.mean_absolute_error(y_test, predictions))
print('MSE:', metrics.mean_squared_error(y_test, predictions))
print('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, predictions)))

"""**Plot a histogram of the residuals and make sure it looks normally distributed. Use either seaborn distplot, or just plt.hist().**"""

sns.distplot((y_test-predictions),bins=50)

#Store the model parameters using Pickle libraries

import pickle
pickle.dump(model, open('co2_model.pkl','wb'))

